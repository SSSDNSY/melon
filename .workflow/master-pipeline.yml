version: '1.0'
name: master-pipeline
displayName: MasterPipeline
triggers:
  trigger: auto
  push:
    branches:
      include:
        - master
stages:
  - name: compile
    displayName: 编译
    strategy: naturally
    trigger: auto
    steps:
      - step: build@maven
        name: build_maven
        displayName: 构建基础包
        jdkVersion: 8
        mavenVersion: 3.3.9
        commands:
          - mvn -B clean package -Dmaven.test.skip=true
        artifacts:
          - name: BUILD_ARTIFACT
            path:
              - ./target
        strategy: {}
      - step: build@maven
        name: build_admin
        displayName: 构建melon-admin.jar
        jdkVersion: '8'
        mavenVersion: 3.3.9
        commands:
          - '# 功能：打包'
          - '# 参数说明：'
          - '#    -Dmaven.test.skip=true：跳过单元测试'
          - '#    -U：每次构建检查依赖更新，可避免缓存中快照版本依赖不更新问题，但会牺牲部分性能'
          - '#    -e -X ：打印调试信息，定位疑难构建问题时建议使用此参数构建'
          - '#    -B：以batch模式运行，可避免日志打印时出现ArrayIndexOutOfBoundsException异常'
          - '# 使用场景：打包项目且不需要执行单元测试时使用'
          - cd melon-admin
          - mvn clean package -Dmaven.test.skip=true -U -e -X -B
          - ''
          - '# 功能：自定义settings配置'
          - '# 使用场景：如需手工指定settings.xml，可使用如下方式'
          - '# 注意事项：如无需自定义settings配置且需要私有依赖仓库，可在该任务配置《私有仓库》处添加私有依赖'
          - '# mvn -U clean package -s ./settings.xml'
          - ''
        artifacts:
          - name: BUILD_ARTIFACT
            path:
              - ./target
        settings: []
        caches:
          - ~/.m2
        notify: []
        strategy:
          retry: '0'
        dependsOn: build_maven
      - step: publish@general_artifacts
        name: publish_general_artifacts
        displayName: 上传制品
        dependArtifact: BUILD_ARTIFACT
        artifactName: melon-prod
        strategy: {}
        dependsOn: build_admin
  - name: release
    displayName: 发布
    strategy: naturally
    trigger: auto
    steps:
      - step: deploy@agent
        name: deploy_agent
        displayName: 主机部署
        hostGroupID:
          ID: fun.pengzh
          hostID:
            - 1868e3f5-0ea3-4558-b4a9-f4b865cbfc84
        deployArtifact:
          - source: artifact
            name: output
            target: ~/gitee_go/deploy
            artifactRepository: default
            artifactName: output
            artifactVersion: latest
        script:
          - '# 功能：部署脚本会在部署主机组的每台机器上执行'
          - '# 使用场景：先将制品包解压缩到指定目录中，再执行启动脚本deploy.sh，脚本示例地址：https://gitee.com/gitee-go/spring-boot-maven-deploy-case/blob/master/deploy.sh'
          - ' mkdir -p /root/jar'
          - ' tar zxvf ~/gitee_go/deploy/output.tar.gz -C /root/jar'
          - ' sh /root/deploy20230206.sh restart'
          - ''
        notify: []
        strategy:
          retry: '0'
