<?xml version="1.0" encoding="UTF-8"?>
<!--
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="5 seconds" debug="true">
    <!-- 定义日志的根目录 -->
    <property scope="system" name="logDir" value="/apps/logs"/>
    <!-- 定义日志文件名称 -->
    <property scope="system" name="appName" value="melon"></property>
    <!-- 定义日志编码 -->
    <property scope="system" name="charset" value="UTF-8"></property>
    <!--
    日志输出格式：
       %d表示日期时间，
       %thread表示线程名，
       %-5level：级别从左显示5个字符宽度
       %logger{50} 表示logger名字最长50个字符，否则按照句点分割。
       %msg：日志消息，
       %n是换行符
    -->
    <property scope="system" name="consolePattern"
              value="%date{HH:mm:ss.SSS} [%thread] %-5level %logger{36} [%file: %line] %msg%n"/>
    <property scope="system" name="pattern"
              value="%date{yyyy-MM-dd HH:mm:ss.SSS} [%X{source}] [%X{tid}] [%X{app}] [%thread] %-5level %logger{36} [%file: %line] %msg%n"/>
    <!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 -->
    <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${consolePattern}</pattern>
            <charset>${charset}</charset>
        </encoder>
    </appender>

    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <appender name="infoFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logDir}/${appName}/info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${logDir}/${appName}/info.log.%d{yyyy-MM-dd}.zip</fileNamePattern>\
            <!--
            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
            且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，
            那些为了归档而创建的目录也会被删除。
            -->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
            <charset>${charset}</charset>
        </encoder>
    </appender>

    <appender name="errorFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logDir}/${appName}/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${logDir}/${appName}/error.log.%d{yyyy-MM-dd}.zip</fileNamePattern>
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
            <charset>${charset}</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="asyncInfoLog" class="ch.qos.logback.classic.AsyncAppender">
        <queueSize>100</queueSize>
        <maxFlushTime>3000</maxFlushTime>
        <discardingThreshold>0</discardingThreshold>
        <neverBlock>true</neverBlock>
        <appender-ref ref="infoFile"/>
    </appender>

    <appender name="asyncErrorLog" class="ch.qos.logback.classic.AsyncAppender">
        <queueSize>100</queueSize>
        <maxFlushTime>3000</maxFlushTime>
        <discardingThreshold>0</discardingThreshold>
        <neverBlock>true</neverBlock>
        <appender-ref ref="errorFile"/>
    </appender>

    <!--
      logger：主要用于存放日志对象，也可以定义日志类型、级别
      name：表示匹配的logger类型前缀，也就是包的前半部分
      level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
      additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，
      false：表示只用当前logger的appender-ref，true：
      表示当前logger的appender-ref和rootLogger的appender-ref都有效
    -->
    <logger name="org.jboss.logging" level="INFO"/>
    <!--
    root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
    要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。
    -->
    <springProfile name="dev">
        <root level="ALL">
            <appender-ref ref="consoleLog"/>
            <appender-ref ref="asyncInfoLog"/>
            <appender-ref ref="asyncErrorLog"/>
        </root>
        <logger name="org.mybatis" level="DEBUG"/>
        <logger name="fun.sssdnsy.melon" level="INFO"/>
        <logger name="org.springframework" level="INFO" additivity="true"></logger>
    </springProfile>

    <springProfile name="prod">
        <root level="INFO">
            <appender-ref ref="consoleLog"/>
            <appender-ref ref="asyncInfoLog"/>
            <appender-ref ref="asyncErrorLog"/>
        </root>
        <logger name="org.springframework" level="debug" additivity="false"></logger>
    </springProfile>

</configuration>
